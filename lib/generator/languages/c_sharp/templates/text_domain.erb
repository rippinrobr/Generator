//------------------------------------------------------------------------------
// Generated on <%= Time.new.inspect %>
// Generated by <%= Etc.getlogin %>
// Using Generator 0.1.1
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using <%= @settings.output_settings[:model_namespace] %>;
<% @settings.output_settings[:imports].each do |ns| %>
using <%= ns %>;
<% end %>

<% 
@domain_class_name = @settings.output_settings[:service_class_name]  
@model_class_name = @settings.class_name
@model_class_name = @settings.output_settings[:model_name]
@settings.output_settings[:service_namespace] = @settings.output_settings[:model_namespace] if @settings.output_settings[:service_namespace].nil? || @settings.output_settings[:service_namespace] == ''
%>
namespace <%= @settings.output_settings[:service_namespace] %>
{

   public interface I<%= @domain_class_name %>
   {
   	string ErrorMessage {get;set;}
	IQueryable<<%= @model_class_name %>> Get(string inputFilePath);
   } 

   public class <%= @domain_class_name %> 
   {
   	public string ErrorMessage {get;set;}

	public IEnumerable<<%= @model_class_name %>> Get(string inputFilePath) 
	{
	    if (String.IsNullOrEmpty(inputFilePath)) throw new ArgumentNullException("inputFilePath");
	    try {
                var lines = File.ReadAllLines(inputFilePath);
		<% i = 0 %>
                return from line in lines
                            let data = line.Split(',')
			    select new <%= @model_class_name %>
                                       {
				        <% @settings.properties.each do |col| %><%= col.field_name.clean_name %> = <%= @settings.write_convert_method(col.field_type, i) %>, 
					<% i += 1; end %>
                                       };

            }
            catch (FileNotFoundException ffe)
            {
                Console.WriteLine("ERROR: {0}", ffe.Message);    
	    }

	
	    return null; 
	}
   }
}


