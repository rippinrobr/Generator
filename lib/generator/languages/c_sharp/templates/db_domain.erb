//------------------------------------------------------------------------------
// Generated on <%= Time.new.inspect %> 
// Generated by <%= Etc.getlogin %>
// Using IRCodeGen 0.1.1
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using <%= @settings.output_settings[:model_namespace] %>;
<% if !@settings.output_settings[:imports].nil? -%>
  <% @settings.output_settings[:imports].each do |ns| %>
using <%= ns %>;
   <% end %>
<% end %>
<% 
        @domain_class_name = @settings.output_settings[:service_class_name]  
	@model_class_name = "#{@settings.class_name}Model" 
	@ef_name = singularize_db_entities(@settings.class_name)
  	@method_definition_key_params = method_definition_key_params
-%>

namespace <%= @settings.output_settings[:service_namespace] %>
{
   public interface I<%= @domain_class_name %> 
   {
		void Delete(<%= @method_definition_key_params %>);
    	IQueryable<<%= @model_class_name %>> Get();
		<%= @model_class_name %> Get(<%= @method_definition_key_params %>);
		void Add(<%= @model_class_name %> model);
		void Update(<%= @model_class_name %> model);
   }

   public class <%= @domain_class_name %> : I<%= @domain_class_name %>
   {
	private readonly IRepository _repo;

	public <%= @domain_class_name%>(IRepository repo)
	{
	   if (repo == null) throw new ArgumentNullException("repo");
	      _repo = repo;
	}

	<% if @settings.db_tables.length == 1 %>
	public IQueryable<<%= @model_class_name %>> Get() 
	{
	return (
	<% 
		ef_name = @settings.db_tables[0].singularize.clean_name.camelize
		tident = ef_name[0].downcase -%>
		  from <%= tident %> in _repo.Get<<%= singularize_db_entities(@settings.db_tables[0]) %>>()
		  select new <%= @model_class_name %> {
		<% @settings.get_table_columns(@settings.db_tables[0]).each do |col| %>
		  <%= col.field_name.clean_name.camelize %> = <%= tident %>.<%= col.col_name %>,
		<% end -%>
	<% else -%>
	public IQueryable<<%= @model_class_name %>> Get() 
	{ <% i = 0; cols = []; fields_gend = [] %>
	<% @settings.db_tables.each do |t| 
		ef_name = t.singularize.clean_name.camelize  %>
		var res<%=i%> = _repo.Get<<%= ef_name %>>();
	<% i += 1;end %>
		return (
		<% i = 0; cols = []; fields_gend = [] %>
		<% @settings.db_tables.each do |t| 
	           cols = cols | @settings.get_table_columns(t) %>
		<% ef_name = t.singularize.clean_name.camelize; tident = "#{ef_name.downcase}" %>
		from <%= ef_name.downcase %> in res<%= i %>
		<% i += 1; end %>
		<% col_names =[]; cols.each {|c| col_names.push c.col_name } %>
		<% i = 0 %>
		where <% col_names.find_dups.each do |d| %>
			<% @settings.db_tables.each do |t| %>
			<%= t.singularize.clean_name.downcase%>.<%= d %><% if i % 2 == 0 %> == <% end %>	
			<% i+= 1; end %>
		<% end %>
		select new <%= @model_class_name %> {
		<% cols.each do |col| 
		   field_to_gen = col.field_name.clean_name.camelize
		   if fields_gend.include?(field_to_gen)
		     field_to_gen = "#{col.table_name.clean_name.camelize}#{field_to_gen}"
	  	   end
		   fields_gend.push field_to_gen %>
		  <%= field_to_gen %> = <%= col.table_name.clean_name.downcase.singularize %>.<%= col.col_name %>,
		<% end %>
	<% end %>
		});
 	}
	 public <%= @model_class_name %> Get(<%= @method_definition_key_params %>)
	 {
         	<% i = 0 %>
		return Get().Where(<%= where_clause_for_all_tables %>)
			.FirstOrDefault();
	}

	<% if @settings.db_tables.length == 1 %>
	public void Add(<%= @model_class_name %> model)
	{
		if (model == null) throw new ArgumentNullException("model");
		_repo.Add<<%= @ef_name %>>(ConvertToEfModel(model));
	}
	<% else %>
	public void Add(<%= @model_class_name %> model)
	{
		if (model == null) throw new ArgumentNullException("model");
	 <% @settings.db_tables.each do |t| %> 
		 <% t ef_name = singularize_db_entities(t) %>
		_repo.Add<<%= ef_name %>>(ConvertTo<%= ef_name %>EfModel(model));
	  <% end %> 
	}
	<% end %>

	public void Delete(<%= @method_definition_key_params %>) 
	{
	 <% @settings.db_tables.each do |t| %> 
	 <% ef_name = singularize_db_entities(t) # t.singularize.clean_name
	     i=0 
	     col_names = [] 
	     @settings.get_table_columns(t).each { |c| col_names.push(c.col_name) } %>
	     // <%= ef_name %>

     	    var <%= t.singularize.gsub(/_/,'') %> = Get<%= ef_name %>Record(<%= create_call_parameters t  %>);
	     if (<%= t.singularize.gsub(/_/,'') %> == null)  throw new NullReferenceException("no record was found with the given id/key");
	     _repo.Delete(<%= t.singularize.gsub(/_/,'') %>);
	 <% end %>
	}
	
	public void Update(<%= @model_class_name %> model)
	{
		if (model == null) throw new ArgumentNullException("model");
		<% j = 0 
		obj_names = [] %>
	 	<% @settings.db_tables.each do |t| %> 
	 	<% ef_name = t.singularize.clean_name
		i=0 
	     	col_names = [] 
	        @settings.get_table_columns(t).each { |c| col_names.push(c.col_name) } 
		obj_names.push "rec#{j}" %>
	var rec<%= j %> = Get<%= ef_name %>Record(<% @settings.table_keys.each do |k| %><% if col_names.include?(k[1][0][2]) %> <%if i > 0 %>, <% end %>model.<%= k[1][0][1].clean_name.camelize %><% i += 1; end %><% end %>);
		<% j += 1; end %>
		UpdateEfModel(<% obj_names.each do |obj| %> <%=obj%>, <% end %>model);
		<% obj_names.each do |obj| %> 
		_repo.Update(<%=obj%>); 
		<% end %>
		
	}

	// Private Methods
	<% if @settings.db_tables.length == 1 %>
	private static <%= ef_name %> ConvertToEfModel(<%= @model_class_name %> model)
	{
		if (model == null) throw new ArgumentNullException("model");
		return new <%= ef_name %> {
	 	<% @settings.get_table_columns(@settings.db_tables[0]).each do |col| %>
			<%= col.col_name %> = model.<%= col.field_name.clean_name.camelize %>, 
		<% end %>	  
		};
	}
	<% else %>
	  <% @settings.db_tables.each do |t| 
	     ef_name = t.singularize.clean_name 
	     col_names = [] 
	     already_written = []
	     @settings.get_table_columns(t).each { |c| col_names.push(c.col_name) } %>
	private static <%= ef_name %> ConvertTo<%= ef_name %>EfModel(<%= @model_class_name %> model)
	{
		if (model == null) throw new ArgumentNullException("model");
		return new <%= ef_name %> {
			<% i = 0 %><% @settings.db_tables.each do |t| %> 
			<% cols = @settings.get_table_columns(t); cols.each do |col| %> <% if col_names.include?(col.col_name) && !already_written.include?(col.col_name)%><%= col.col_name %> =  model.<%= col.field_name.clean_name.camelize %>,<% already_written.push(col.col_name); end %>
			<% end %> <% i+=1;end %>};
	}
     	  <% end %>
     <% end %>
	  <% @settings.db_tables.each do |t| 
	     ef_name = t.singularize.clean_name %>
     private <%= ef_name %> Get<%= ef_name %>Record(<%= create_method_parameters(t) %>)	
	     { 
		return _repo.Get<<%= ef_name %>>()
		.Where( w => <%= create_where_parameters(t, 'w') %> )
			.FirstOrDefault();
	     
	 }
	<% end %>
	
	<% i = 0 %>
	private static void UpdateEfModel(<% @settings.db_tables.each do |t| %>  <%= t.singularize.clean_name %> rec<%=i%>, <%i += 1;end%> <%= @model_class_name %> model) 
	{ <% i = 0 %><% @settings.db_tables.each do |t| %> 
	    	<% cols = @settings.get_table_columns(t); cols.each do |col| %> rec<%=i%>.<%= col.col_name %> =  model.<%= col.field_name.clean_name.camelize %>;
	<% end %> <% i+=1;end %>
	}
  }
}
