<% @settings.import_namespaces.each do |ns| %>
using <%= ns %>;
<% end %>

namespace <%= @settings.domain_namespace %>
{ 
  public class <%= @model_class_def.name %>
  {
     private readonly IRepository _repo;

     pubilc <%= @model_class_def.name %>(IRepository repo)
     {
       	if (repo == null) throw new ArgumentNullException("repo");
       	_repo = repo;
     }

     public IQueryable<<%= @settings.model_name %>> Get()
     {
     	return _repo.Get<<%= @sesttings.db_model_name %>>();
     }

     // Need to figure out how to set up the keys for this thing.
     // if no keys are selected don't write this baby out
     public <%= @settings.model_name %> Get(int id)
     {
     return _repo.Get<<%= @settings.db_model_name %>>().
     	Where(p => p.lahmanID == id)
     	.FirstOrDefault();
     }
        
     public void Add(<%= @settings.model_name %> model)
     {
     	if (model == null) throw new System.ArgumentNullException("model");
	_repo.Add<<%= settings.db_model_name %>>(this.ConvertToEfModel(model));
     }
        
     public void Update(<%= @settings.model_name %> model)
     {
     	if (model == null) throw new System.ArgumentNullException();

        // this needs to make use of the key column(s)	
	var rec = this.GetRecord(model.Id);
     	this.UpdateEfModel(rec, model);
	_repo.Update<<%= @settings.db_model_name %>>(rec);
     }
     
     // this param needs to be a comma-delimited list of keys 
     public void Delete(int id)
     {
       // needs to reflect the keys
       if (id < 1) throw new System.ArgumentOutOfRangeException("id");
       
       var rec = GetRecord(id);
       _repo.Delete<<%= @settings.db_model_name %>>(rec);
     }

    // THESE METHODS FROM THIS POINT DOWN ARE FOR DB SOURCED CREATIONS ONLY 
 	public virtual BattingStat ConvertToEfModel(BattingStatsModel model)
        {
            var rec = new BattingStat();
            if (model != null)
	    {
                // Assign values
                model.Id = rec.lahmanID;
                model.Year = rec.yearID;
                model.Stint = rec.stint;
                model.TeamId = rec.teamID;
                model.LeagueId = rec.lgID;
                model.Games = rec.g;
                model.BattingGames = rec.g_batting;
                model.AtBats = rec.ab;
                model.Runs = rec.r;
                model.Hits = rec.h;
                model.Doubles = rec.doubles;
                model.Triples = rec.triples;
                model.Hr = rec.hr;
                model.Rbi = rec.rbi;
                model.Sb = rec.sb;
                model.Cs = rec.cs;
                model.Bb = rec.bb;
                model.K = rec.so;
                model.Ibb = rec.ibb;
                model.Hbp = rec.hbp;
                model.Sh = rec.sh;
                model.Sf = rec.sf;
                model.Gidp = rec.gidp;
            }
            else
            {
                throw new System.ArgumentNullException();
            }
            return rec;
        }
        
        public virtual BattingStatsModel ConvertToViewModel(BattingStat record)
        {
            var model = new BattingStatsModel();
            if (record != null)
            {
                // Setting properties
                model.Id = record.lahmanID;
                model.Year = record.yearID;
                model.Stint = record.stint;
                model.TeamId = record.teamID;
                model.LeagueId = record.lgID;
                model.Games = record.g;
                model.BattingGames = record.g_batting;
                model.AtBats = record.ab;
                model.Runs = record.r;
                model.Hits = record.h;
                model.Doubles = record.doubles;
                model.Triples = record.triples;
                model.Hr = record.hr;
                model.Rbi = record.rbi;
                model.Sb = record.sb;
                model.Cs = record.cs;
                model.Bb = record.bb;
                model.K = record.so;
                model.Ibb = record.ibb;
                model.Hbp = record.hbp;
                model.Sh = record.sh;
                model.Sf = record.sf;
                model.Gidp = record.gidp;
            }
            else
            {
                throw new System.ArgumentNullException();
            }
            return model;
        }
        
        private void UpdateEfModel(BattingStat rec, BattingStatsModel model)
        {
            if (rec != null && model != null)
            {
                // Setting properties
                model.Id = rec.lahmanID;
                model.Year = rec.yearID;
                model.Stint = rec.stint;
                model.TeamId = rec.teamID;
                model.LeagueId = rec.lgID;
                model.Games = rec.g;
                model.BattingGames = rec.g_batting;
                model.AtBats = rec.ab;
                model.Runs = rec.r;
                model.Hits = rec.h;
                model.Doubles = rec.doubles;
                model.Triples = rec.triples;
                model.Hr = rec.hr;
                model.Rbi = rec.rbi;
                model.Sb = rec.sb;
                model.Cs = rec.cs;
                model.Bb = rec.bb;
                model.K = rec.so;
                model.Ibb = rec.ibb;
                model.Hbp = rec.hbp;
                model.Sh = rec.sh;
                model.Sf = rec.sf;
                model.Gidp = rec.gidp;
            }
            else
            {
                throw new System.ArgumentNullException();
            }
        }
        
        private BattingStat GetRecord(int id)
        {
            if (id < 1) throw new System.ArgumentOutOfRangeException("id");
            {
                var rec = this.Get(id);
                if (rec != null)
                {
                    return rec;
                }
                else
                {
                    throw new System.ArgumentNullException();
                }
            }
            else
            {
            }
       }
  }
}
